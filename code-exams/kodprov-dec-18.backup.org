#+TITLE: Kodprov 2017-12-18
#+INCLUDE: "head.org"

* Instruktioner

Öppna en terminal och skriv omedelbart =mkdir kodprov171218=[fn::Obs! . skall inte vara med i kommandona nedan!].

Gå in i denna katalog med =cd kodprov171218=.

Hämta sedan kodprovet till din dator med följande kommando: =curl --remote-name http://wrigstad.com/ioopm/sorsele.zip=.

Nu får du en zip-fil med koden till uppgifterna som du kan packa upp så här: =unzip sorsele.zip=.

Nu har du fått ett antal filer och kataloger:

- =uppgift1= -- filer för uppgift 1
- =uppgift2= -- filer för uppgift 2
- =Makefile= -- en makefil för att /lämna in/ kodprovet


** Inlämning och rättning

Inlämning går till så här: ställ dig i katalogen
=kodprov171218=. Om du har tappat bort dig i filsystemet kan du
skriva =cd; cd kodprov171218=. Nu kan du skriva =make handin=
för att lämna in kodprovet. När du kör detta kommando skapas en
zip-fil med de filer som du har uppmanats att ändra i (inga
andra), och denna fil sparas sedan på en plats där vi kan rätta
provet.

Den automatiska rättningen kommer att gå till så att vi kör dina
inlämningar mot omfattande testfall. Du har fått ut mindre
omfattande testfall eller motsvarande i detta prov som du kan
använda som ett /stöd/ för att göra en korrekt lösning. Experiment
med att lämna ut mer omfattande tester har visat sig skapa mer
stress än hjälp (tänk fler testfall som fallerar)[fn::Att lämna ut
exakt samma test som används vid rättning är heller inte lämpligt,
då det har förekommit fall då studenter /försökt/ simulera en
korrekt lösning genom att bara hacka output för specifika
testvärden.].

Om du har löst uppgifterna på rätt sätt och testfallen som du får
ut passerar är du förhoppningsvis godkänd.



** Allmänna förhållningsregler

- Samma regler som för en salstenta gäller: inga mobiltelefoner, inga
  SMS, inga samtal med någon förutom vakterna oavsett medium.
- Du måste kunna legitimera dig.
- Du får inte på något sätt titta på eller använda gammal kod som
  du har skrivit.
- Du får inte gå ut på nätet.
- Du får inte använda någon annan dokumentation än man-sidor och böcker.
- Det är tillåtet att ha en bok på en läsplatta, eller skärmen på
  en bärbar dator. Inga andra program får köra på dessa maskiner,
  och du får inte använda dem till något annat än att läsa
  kurslitteratur.
- Du måste skriva all kod själv, förutom den kod som är given.
- Du får använda vilken editor som helst som finns installerad på
  institutionens datorer, men om 50 personer använder Eclipse
  samtidigt så riskerar vi att sänka servrarna.

Vi kommer att använda en blandning av automatiska tester och
granskning vid rättning. Du kan inte förutsätta att den kod du
skriver enbart kommer att användas för det driver-program som
används för testning här. Om du t.ex. implementerar en länkad
lista av strängar kan testningen ske med hjälp av ett helt annat
driver-program än det som delades ut på kodprovet.

I mån av tid har vi tidigare år tillämpat ett system där vi ger
rest för mindre fel. Det är oklart om detta system tillämpas i år,
men det betyder att det är värt att lämna in partiella lösningar,
t.ex. en lösning som har något mindre fel.

* C-uppgiften
** Vad du skall göra -- läs mig först!

Skriv klart ~kalloc_inner_find()~ som används i ~kalloc_free()~.

Du kan verifiera att ditt program gör rätt genom att köra de
minimala testerna. Modulo adresserna[fn::De kommer att variera på
olika datorer -- men skall vara identiska mellan expected och
actual output.] skall en körning se ut så här:

#+BEGIN_SRC
Test 1: ------------------------
Expected output:
Integrity check failed for: 0x55e587bf92f8 (4 bytes, allocated at driver.c:16 in main) -- expected OxDEADBEEF, found OxDEADBE00
Actual output:
Integrity check failed for: 0x55e587bf92f8 (4 bytes, allocated at driver.c:16 in main) -- expected OxDEADBEEF, found OxDEADBE00

Test 2: ------------------------
Expected output:
Successfully ignored second attempt at freeing str
Actual output:
Successfully ignored second attempt at freeing str

Test 3: ------------------------
Expected output:
Checking integrity for: 0x55e587bf9288 (42 bytes, allocated at driver.c:13 in main) ... OK
Actual output:
Checking integrity for: 0x55e587bf9288 (42 bytes, allocated at driver.c:13 in main) ... OK
--------------------------------
#+END_SRC

Verifiera också att programmet inte läcker minne eller
läser/skriver till minne som är oinitierat eller oallokerat.

**OBS!** Läs avsnittet om att kompilera och testa ditt program!

**TIPS #1!** Det är ingen fara om det tar 90-120 minuter att läsa
instruktionerna. Lösningen är storleksordningen 10 rader kod. Kom
ihåg att testa med och utan valgrind.

**TIPS #2!** Du måste konvertera mellan /userland objects/ och
/internal pointers/. Kommentarerna i ~kalloc.c~ ger bra
information.

**TIPS #3!** Läs speciellt kapitlet "Sammanhanget för ~kalloc_inner_find()~".


#+BEGIN_QUOTE
Läs nu vidare!
#+END_QUOTE

** kalloc -- ett bibliotek för att slåss mot minnesfel

#+BEGIN_QUOTE
Observera att även om /domänen/ för denna uppgift är krånglig, så
är lösningen "enkel" och innefattar ingen programmering som du
inte har gjort tidigare om du har följt kursen och gjort labbar och
inluppar. Ett av målen är att det skall vara omöjligt att klara
tentan om du mest har suttit och tittat på när någon annan har
programmerat!
#+END_QUOTE

Den här uppgiften går ut på att skriva /klart/[fn::OBS! Det är
nästan färdigt!] biblioteket /kalloc/ som fungerar som ~malloc()~
och ~free()~, men som använder några enkla C-tricks för att se om
användaren råka skriva utanför det allokerade minnet.

Det är inte särskilt mycket kod att skriva, men för att klara
uppgiften måste du kunna läsa kod, och framförallt förstå vad som
/inte/ är relevant för det du skall göra. Det hjälper också att
kunna felsöka och ta hjälp av =gdb= och =valgrind=.

Under kursen har vi lärt oss att tänka på ~malloc()~ som en svart
låda. Vi vet inte hur ~malloc()~ är implementerat, och skall
heller inte tänka på det. Biblioteket /kalloc/ tillhandahåller
(bland annat) funktionen ~kalloc()~ som är en abstraktion ovanpå
~malloc()~, sådan att när användaren ber om /n/ bytes, allokeras
/h/ + /n/ + /m/ bytes där:

1. De första /h/ bytesen används till en /header/ som sparar
   information om minnesplatsen -- t.ex. i vilken fil, funktion
   och på vilken rad som allokeringen skedde.
2. De efterföljande /n/ bytesen är de bytes som användaren skall
   använda -- samma som ~malloc(n)~ hade returnerat
3. De sista /m/ bytesen används till att lagra ett "magiskt tal"

Alltså om ~malloc(n)~ returnerar något som ser ut så här:
=DDDDDDDDDDDDD= (där =D= står för något data) så kommer
~kalloc(n)~ att returnera =HHHH_DDDDDDDDDDDDD_MM= där =HHHH= är
headern och =MM= är det magiska talet (samma tal för alla
allokeringar) och =_= är separatorer för läsbarhetens skull,
som inte finns med i minnet.

När användaren återlämnar minne /p/ allokerat med ~kalloc()~, med
hjälp av funktionen ~kalloc_free()~, kontrollerar denna funktion
att de sista /m/ bytesen i /p/ fortfarande innehåller det magiska
talet. I ett korrekt program både så alltid vara fallet, men /om/
programmet skrivit utanför en datastrukturs storlek är sannolikheten
stor att det magiska talet skrivits över. Det magiska talet är alltså
lite som en kanariefågel, i minnets kolgruva.

Alltså, när ett minne frigörs kontrollerar vi att det magiska
talet är orört. Om talet har ändrats skrivs ett felmeddelande ut,
som använder informationen i /p/:s header för att tala om varifrån
allokeringen kom. Så här kan det se ut:

=Integrity check failed for: 0x55d8f6e78080 (4 bytes, allocated at driver.c:9 in main) -- expected OxDEADBEEF, found OxDEADBE00=

Detta fel genererades så här:

#+BEGIN_SRC c
  /// Initierar kalloc med OxDEADBEEF som magiskt tal
  kalloc_init(0xDEADBEEF);

  /// Allokerar 3 bytes till en sträng mha kalloc
  char *str = kalloc(3);

  /// Kopierar 4 bytes in i det 3 bytes stora området...
  /// Minns att Hej har ett \0 på slutet!
  strcpy(str, "Hej");
#+END_SRC

Att det magiska talet har blivit =OxDEADBE00= istället för
=OxDEADBEEF= kommer sig alltså av att de första åtta bitarna som
representerar det magiska talet har skrivits över med null-tecknet
som terminerar strängen ~"Hej"~. Det i sig är inte viktigt, men
illustrerar hur det går att använda /kalloc/-biblioteket för att
se vilka allokeringar som trasas sönder.

** Två viktiga koncept: userland pointers och pekare till allokerat minne

Det skall inte vara möjligt för någon som får en pekare till ett
minne att se att ~kalloc()~ använts för att allokera det. Det
skall se ut som om det är allokerat med vanlig ~malloc()~. Därför
returnerar ~kalloc()~ inte en pekare till starten av det minne som
allokerats, utan en pekare /h/ bytes in[fn::Minns att vi allokerar
/h/ + /n/ + /m/ bytes när användaren ber om /n/ bytes.] -- dvs. en
pekare som pekar förbi headern och på det första av de /n/ bytes
som hen bad om. På så sätt kan användaren göra

#+BEGIN_SRC c
char *str = kalloc(4);
strcpy(str, "Hej");
#+END_SRC

utan att råka skriva över headern som håller koll på hur många
bytes som är allokerade, var allokeringen skedde, etc[fn::Att
lägga metadatat "till vänster" om en pekare är ett
standard-C-trick. Det kommer av att vi normalt inte vet hur många
bytes allokerat minne en pekare /p/ pekar ut, så vi kan inte räkna
ut slutet av vad /p/ pekar på, och därför inte lägga metadatat
där. Om metadatat har en fix längd (vilket det har i vårt fall) är
det dock möjligt att hitta det genom att "backa" i minnet, /h/
bytes i vårt fall.].

För varje ~kalloc()~-allokerat minne =HHHH_DDDDDDDDDDDDD_MM= kan
vi alltså prata om två pekare:

1. /userland pointer/ som är den pekare som returneras, och som
   alltså pekar på det första =D=:et[fn::~str~ ovan är en
   /userland pointer/.], samt
2. /internal pointer/ som pekar på det första =H=:et, alltså på
   den faktiska starten av det allokerade minnet.

Skillnaden mellan dessa två i bytes är precis headerns
storlek[fn::Funktioner för att konvertera mellan dessa två pekare
headern, till datat samt för att givet en pekare ta fram dess
magiska tal, finns redan implementerat!].

Alla publika funktioner i =kalloc.h= som tar in eller returnerar
pekare tar in eller returnerar userland pointers. Internt hanterar
många funktioner pekare till starten av allokerat minne. Dessa
pekare har typen ~obj_t~.

Observera att det inte finns någon strukt i ~kalloc.c~ som
motsvarar hela det allokerade minnet, alltså hela /h/ + /n/ + /m/
eller =HHHH_DDDDDDDDDDDDD_MM=. Det är omöjligt eftersom vi inte vet
storleken på /n/ vid kompileringtid! Istället använder vi
/pekararitmetik/ för att räkna ut starten på =HHHH=,
=DDDDDDDDDDDDD= och =MM=.

Det sköts av funktionerna ~kalloc_header()~ och ~kalloc_object()~.

** Sammanhanget för ~kalloc_inner_find()~

Ovan beskrevs hur vi kunde kontrollera i samband med anrop till
~kalloc_free()~ om det magiska talet längst bak i ett objekt
fortfarande var intakt. Detta är problematiskt på två sätt:

1. Det hjälper oss dock inte att hitta minnesfel i minne som
   aldrig frias
2. Tiden mellan minnet förstördes och vi märker det i samband med
   anrop till ~kalloc_free()~ kan vara väldigt lång

Funktionen ~kalloc_check_integrity()~ löser båda dessa problem.
När gör den en integritetskontroll på /alla allokerade objekt/.
Men för att göra detta måste vi hålla koll på alla allokerade
objekt!

För att hålla reda på alla allokerade objekt stoppar vi dem i en
länkad lista. För att slippa allokera minne för en länk varenda
gång användaren allokerar något med ~kalloc()~ stoppar vi in en
~next~-pekare i headern på varje objekt så att varenda allokerat
minne utom det sista pekar på nästa allokerade minne. På så sätt
kan ~kalloc_check_integrity()~ enkelt loopa igenom minnet och
hitta alla allokeringar.

Funktionen ~kalloc_inner_find()~, som är den som du skall skriva,
skall alltså ta emot en userland pointer /p/, och söka igenom den
länkade listan av interna pekare till allokerade block för att se
om någon av dessa pekare har /p/ som sin motsvarande userland
pointer. Det vill säga vi letar efter något /q/ sådant att
~kalloc_object(q) == p~. Finns det ett sådant /q/ vill vi
returnera /föregående minnesblock/, så att ~kalloc_free()~ kan
länka ur /q/ ur listan.

Observera att listan är implementerad med en dummy-nod först, dvs.
från start finns det alltid en tom nod först i listan, så att ett
föregående minnesblock alltid existerar för alla giltiga /p/.

** Kompilera och testa ditt program

Du kan testa ditt program mot =driver.c=. Du kan kompilera
programmet med =make=, köra tester med =make test-soft= eller
=make test-hard= och köra testerna i valgrind med =make memtest=.
Du måste inspektera utskrifterna på skärmen själv.

=make test-hard= använder assertions för att testa programmet. Det
betyder att programmet kan krascha om det är felaktigt -- det är
till och med så att =make test-hard= på den utdelade koden ger en
failed assertion.

Därför finns =make test-soft= som stänger av assertions, och som
låter dig köra hela programmet. Tanken är att du kan börja med
=make test-soft= för att så småningom gå över till =make test-hard=.

**OBS!** För att bli godkänd måste ditt program inte bara vara
korrekt utan också fritt från minnesläckage, inte läsa oinitierat
minne och inte skriva utanför allokerat minne eller skriva över
data på stacken. Alla block allokerade av programmet skall vara
explicit frigjorda i programmet innan det terminerar. Verifiera
det med =valgrind=.

/Observera återigen/ att testerna i makefilen är till för att
hjälpa dig att hitta fel i din kod och att programmet passerar
testerna inte nödvändigtvis betyder att programmet är korrekt
eller att du är godkänd.

#+CAPTION: Exempelkörning med =make test-soft= med den utdelade koden
#+BEGIN_SRC
Test 1: ------------------------
Expected output:
Integrity check failed for: 0x55595af802f8 (4 bytes, allocated at driver.c:16 in main) -- expected OxDEADBEEF, found OxDEADBE00
Actual output:

Test 2: ------------------------
Expected output:
Successfully ignored second attempt at freeing str
Actual output:
Successfully ignored second attempt at freeing str

Test 3: ------------------------
Expected output:
Checking integrity for: 0x55595af80288 (42 bytes, allocated at driver.c:13 in main) ... OK
Actual output:
Checking integrity for: 0x55595af80288 (42 bytes, allocated at driver.c:13 in main) ... OK
Checking integrity for: 0x55595af802f8 (4 bytes, allocated at driver.c:16 in main) ... FAILED
--------------------------------
#+END_SRC


* Java-uppgiften
Denna uppgift avser att testa Java-programmering med fokus på ett
par koncept:

- Subtypning
- Inkapsling
- Parametrisk polymorfism
- Identitet kontra ekvivalens

(Uppgiften blir också lite enklare om du förstår iteratorer och
standard-interfacet ~Comparable~.)

Uppgiften går ut på att implementera en mängd från grunden[fn::Med
/från grunden/ avses att du inte får använda existerande bibliotek
t.ex. en lista, kö eller mängd från standard-JDK för att lösa
uppgiften.]. Denna kö skall vara en /subtyp/ av ~SuperSet~ och
~ISet~ som båda ligger i katalogen =uppgift2=. Respektera Liskovs
subtypsprincip!

Mängden skall vara implementerad med hjälp av en länkad lista --
men detta faktum skall vara ordentligt inkapslat. Det skall inte
vara möjligt för en användare av en mängd att se hur den är
implementerad, eller få en pekare/referens till mängdens interna
representation (t.ex. en nod i listan).

Mängden som vi skall implementera skall /inte/ vara ett multi-set
-- det vill säga, ett element får förekomma i mängden endast en
gång. Det betyder att vid upprepad insättning av samma objekt
skall alla insättningar utom den första ignoreras (såvida inte
elementet tagits bort dessemellan). Detta kräver att vi ställer
oss frågan vad som avses med /samma objekt/. I detta fall avser
samma /ekvivalens/ och inte identitet. Vidare anser vi att två
mängder är samma mängd om de innehåller samma objekt. Observera
att mängder är oordnade!

Vidare skall vi använda parametrisk polymorfism, så att det går
att skapa mängder av specifika objekttyper med typsäkerhet, alltså
t.ex. en mängd av basebollspelare, som därför inte kan innehålla
fotbollspelare (med mindre än att sådana spelares klasser är
relaterade med arv).

För ytterligare krav på implementationen -- läs /kommentarerna/ i
koden för ~SuperSet~ och ~ISet~. Några enkla tester finns i
~Driver.java~ som kan köras med =make test=.

**OBS! Du får bara ändra i filen =Set.java=.**

** Tips

1. Var smart! Fundera på om olika metoder hänger ihop och kanske
   kan implementeras med hjälp av varandra. Om du inte begriper
   iteratorn kanske en generell ~findPrevious()~ kan hjälpa!
2. Tänk efter före -- kanske är den optimala ordningen att
   implementera metoder inte samma ordning som de är listade i
   ~SuperSet~ eller ~ISet~?!
3. Metoder som kastar ~SubclassResponsibilityException~ skall du
   implementera -- men även andra metoder måste implementeras!
4. Det finns en iterator i ~SuperSet~ som du med fördel kan
   använda i ~Set~. Om du inte förstår hur den fungerar kan du
   använda ~asArray()~ eller traversera länkarna manuellt.
5. Du får bara ändra i filen =Set.java=.
6. Minns skillnaden mellan /overriding/ och /overloading/!
   Utöver konstruktorerna finns inget behov av overloading för
   att lösa denna uppgift! (Hint: ~equals()~!)
7. Metoder som är ~final~ kan inte override:as
8. För att t.ex. ~union()~ skall returnera ett objekt av rätt typ
   krävs det att du använder overriding på exakt ett nyckelställe!
9. Fastna inte på en deluppgift -- fastnar du så gå vidare och
   kom tillbaka senare!

** En lista med en dummy-nod

Den lista som finns definierad i ~SuperSet~ har en dummy-nod, dvs.
en tom lista har en nod (aka länk) utan innehåll. Anledningen till
detta är att det förenklar borttagning eftersom det alltid går att
positionera sig på föregående länk vid borttagning av elemneten.
(Detta behöver du dock inte bry dig om när du använder iteratorn.)

**  Kompilera och testa ditt program

Som vanligt kan du kompilera och testa ditt program med =make
test=. Som vanligt är det inte någon garanti att du är godkänd om
testerna passerar.
